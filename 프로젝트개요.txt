[ 깃허브 오픈 API를 활용하여 특정 레포지토리의 이슈를 조회할 수 있는 웹사이트를 만들것 ]

아래 깃허브 open Api를 활용하여 이슈를 조회하는 웹사이트 만들기
https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-user-account-issues-assigned-to-the-authenticated-user


목표
    본인이 잘 모르는 오픈 api라 할지라도 사용할 수 있는가?
    페이지네이션을 구현할 수 있는가?
    필터 기능 구현을 효율적으로 할 수 있는가?
    리액트로 반응형 웹사이트를 만들 수 있는가?
    rtk 사용법을 익히고 있는가?

요구사항
    가. 목록페이지
        - 이슈데이터를 가져와야하는 레퍼지토리는 angular-cli를 활용
            https://github.com/angular/angular-cli
        - 이슈목록은 10개 단위의 페이지네이션으로 구현할 것
            * 총 이슈의 갯수는 최고 200개로 한정(total item:200)
                • api에서 구할 수 없는 데이터이므로 회의로 정할 것
                • 만약 총 이슈의 갯수가 200개가 안된다고 하더라도 빈 페이지가 보이도록 구헌
            * 현재 페이지의 숫자는 포커스 되어있어야 할것 < 1, 2, 3, 41, 5,6,7,8, 9,10 
            * 10페이지 단위로 마지막 페이지에서 다음 페이지를 누르면 다음 10 페이지가 뜨도록 구현할 것
                • < 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 > [다음버튼]
                • < 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 

            * 버튼은 [맨처음] [이전] 1, 2, 3, 4, 5 [다음] [맨끝]으로 구현할 것

        - 필터 기능 구현 (생성순/업데이트순/댓글순, 10개/20개/50개 씩 보기)
        - 필터 기능 및 페이지네이션 구현 시 뒤로가기 기능을 지원해야한다
            ex) 2페이지 - 3페이지 (뒤로이동) - 2페이지
                생성순 - 업데이트순 (뒤로이동) - 생성순

        - 목록은 RTK클 할용하여 전역 상태 관리 할 것
        - 모바일 및 태블릿 화면으로 봐도 UX에 불편함이 없어야 함
        - 데이터가 받아오는 동안 리스트 화면은 로딩 페이지를 띄워야함

    나. 상세페이지
        - 이슈의 id 값을 촬용하여 api를 요청하고 해당 issue의 상세페이지는 구현할 것
        - 모바일 및 태블릿 화면으로 봐도 UX에 불편함이 없어야 함
    
    다. 공동
        - 각 기능 마다 브랜치를 파서 merge 할 것
        - READ.md에 아래와 같은 사항을 추가할 것
            - 프로젝트 설명
            - 배포 주소 or 시연 영상
            - 프로젝트 폴더 구조
            - 팀원
            - 사용 기술 스택
            - 요구사항 구현 내역
            - 코드 및 깃허브 커밋 컨벤션

    예시 이미지 (캡쳐 본 확인)

-------------------------------------------------------------------------------------------------------

현재 과제는 개인별로 나눌만한 기능이 존재하지는 않습니다.

즉 프로젝트가 아닌 과제 규모로 페어끼리 완성하는 것도 괜찮아 보입니다.

단, 페어끼리 진행하더라도 레퍼지토리를 따로 파서 기능별로 branch가 default branch에 merge가 되는 것을 커밋히스토리에서 확인이 가능해야합니다.

물론 이는 제 개인적인 의견이므로 조원들과 상의하여 현재 조에 맞는 상황에 맞게 진행하셔도 좋습니다 :)

만약 저라면 아래와 같이 계획하여 프로젝트를 진행했을 것 같습니다.

즉석에서 생각해낸거라 조금 보기 불편하실 수 있으니 참고만 해주시기 바랍니다.

———————————————————

코어타임
1. (공통) 러프한 디자인 도출
2. github api 적용법에 대한 이야기 공유

페어타임
— 설계 ——
1. 깃허브 컨벤션 설정
2. 폴더 구조 설정
3. RTK 초기 세팅

4.공용 컴포넌트 디자인 (버튼, 드롭다운박스, 레이아웃 등)

5.디자인 시스템 설계 (미디어쿼리, 반응형 라이브러리, 테마 색상 설정 등 어떤 것을 써야할지)

— 구현 —

6.기능을 구현하지 않고 api를 콜한 후 레이아웃 구성하기 (상세페이지, 목록페이지로 나누고 반응형까지 적용하기)

- api가 이미 있기 때문에 mock data를 구상 할 필요는 없습니다.

7.기능 나누기 
 목록 - (페이지네이션, api 콜, 필터, 로딩페이지 보이기)
상세 - (목록에서 클릭한 이슈의 api 콜)

8. 기능목록
중요도 1,2,3으로 구분

-페이지네이션 (3)
-필터(2)
-로딩페이지 보이기 (1~3)
: 로딩페이지의 경우 어떻게 보이게 만드냐에 따라 난이도가 어려워질 수도 쉬워질 수도 있음

———————————————————

정리
공통사항 정하기 및 페어별 초기셋팅 [수] -> 페이지별로 브랜치를 나누어 api 데이터를 토대로 레이아웃을 만들고 merge하기 (반응형 포함) — [목]
- 상세페이지가 내용이 더 많으므로 실력이 조금 더 있는 분이 상세 페이지를 빠르게 만들고 붙어서 도와주는게 좋습니다 

-> 레이아웃이 종료되었으므로 기능 구현만 남음 -> 조원1(페이지네이션) 조원2(필터, 로딩)으로 나누어 실행 [금,토] -> merge -> 다른 페어와 비교 -> best practice 산출 [일]

———————————————————

위는 제 개인적인 의견일 뿐, 수업 이후 처음 사용하는 스택인 만큼 난이도가 있을 것이라 생각합니다.

만약 이 문제를 빠르게 풀이했다면 이미 신입 수준에 도달했다는 이야기일테니까요!

따라서 시간이 정말 부족하다 생각한다면

페어별로 페이지를 나누어 제작 및 구현 하셔도 괜찮습니다.

- 먼저 완성한다면 다른 페어를 도와주셔야합니다! 너 분담, 내 분담이라는 것은 존재하지 않아요, 남의 코드를 보는 것도 실력입니다.

——————————————————